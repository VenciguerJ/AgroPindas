@model CompraViewModel
@{
    ViewData["Title"] = "Criar Fornecedor";
}
<form asp-action="Compra" method="post">
    <div class="row mb-3">
        <!-- Coluna 1: Fornecedor -->
        <div class="col-md-6">
            <label for="fornecedor" class="form-label">Selecione o fornecedor</label>
            <div class="input-group">
                <select asp-for="@Model.Compra.IdFornecedor" class="form-control" required>
                    <option value="0">Selecione...</option>
                    @foreach (var fornecedor in Model.Fornecedores)
                    {
                        <option value="@fornecedor.Id">@fornecedor.RazaoSocial</option>
                    }
                </select>
                <span asp-validation-for="@Model.FornecedorCompra.Id" class="text-danger"></span>
            </div>
        </div>

        <!-- Coluna 2: Valor Total -->
        <div class="col-md-6">
            <label for="valorTotal" class="form-label">Valor Total</label>
            <input type="number" class="form-control" asp-for="@Model.Compra.ValorTotal" id="js-valor-total" value="00.00" readonly>
        </div>
    </div>

    <!-- Grid de Produtos -->
    <h4 class="mt-4">Produtos</h4>
    <table class="table table-bordered">
        <thead class="table-light">
            <tr>
                <th scope="col">Produto</th>
                <th scope="col">Quantidade</th>
                <th scope="col">Preço Unitário</th>
                <th scope="col">Subtotal</th>
                <th scope="col">Ações</th>
            </tr>
        </thead>
        <tbody id="table-js-product">
            <tr class="js-row">
                <td>
                    <select name="Lotes[0].IdProduto" class="form-control select-produto" required>
                        <option value="0">Selecione...</option>
                        @foreach (var produto in Model.Produtos)
                        {
                            <option value="@produto.Id">@produto.Nome</option>
                        }
                    </select>
                </td>
                <td>
                    <input type="number" name="Lotes[0].QuantidadeLote" class="form-control input-quantidade" value="1" required/>
                </td>
                <td>
                    <input type="number" class="form-control input-preco" readonly />
                </td>
                <td class="subtotal">00.00</td>
                <td>
                    <button type="button" class="btn btn-danger btn-sm js-remove-btn" onclick="removerProduto(this)">Remover</button>
                </td>
            </tr>
        </tbody>
    </table>

    <!-- Botões de ação -->
    <div class="d-flex justify-content-end">
        <button type="button" class="btn btn-primary" id="adicionarProduto">Adicionar Produto</button>
        <button type="submit" class="btn btn-success ms-2">Finalizar Compra</button>
    </div>
</form>

<script>
    function removerProduto(button) {
        const row = button.closest("tr");
        const tableBody = document.getElementById("table-js-product");

        if (tableBody.rows.length > 1) {
            row.remove();
        } else {
            alert("É necessário ter pelo menos um produto.");
        }
    }

    const table = document.getElementById('table-js-product');
    // Função para buscar o preço do produto via AJAX
    function buscarPrecoProduto(produtoId, callback) {
        fetch(`http://10.241.162.251:5067/API/GetProduto/${produtoId}`)
            .then(response => {
                if (!response.ok) {
                    throw new Error('Erro ao buscar o preço do produto.');
                }
                return response.json();
            })
            .then(data => {
                callback(data.preco); // Usa 'data.preco' para acessar o valor do produto retornado
            })
            .catch(error => console.log(error));
    }

    table.addEventListener('change', function (event) {
        if (event.target.classList.contains('select-produto')) {
            const select = event.target;
            const produtoId = select.value;
            const inputPreco = select.closest('tr').querySelector('.input-preco');

            if (produtoId != "0") {
                buscarPrecoProduto(produtoId, function (precoUnitario) {
                    inputPreco.value = parseFloat(precoUnitario).toFixed(2);
                    atualizarSubtotal(select.closest('tr'));
                });
            } else {
                inputPreco.value = "00.00";
                atualizarSubtotal(select.closest('tr'));
            }
        }
        if (event.target.classList.contains('input-quantidade')) {
            atualizarSubtotal(event.target.closest('tr'));
        }
    });

    // Função para atualizar o subtotal da linha
    function atualizarSubtotal(row) {
        const quantidade = parseFloat(row.querySelector('.input-quantidade').value);
        const preco = parseFloat(row.querySelector('.input-preco').value);
        const subtotal = quantidade * preco;
        subtotal.toFixed(2)
        row.querySelector('.subtotal').textContent = subtotal;
        atualizaValorTotal();
    }

    function AddToValorTotal(valor) {
        const $valorTotal = document.getElementById('js-valor-total');
        let valorTotal = parseFloat($valorTotal.value);
        if (valorTotal == 0) {
            valorTotal = parseFloat(valor);
        }
        else {
            valorTotal += parseFloat(valor);
        }
        $valorTotal.value = parseFloat(valorTotal.toFixed(2));
    }
    function atualizaValorTotal() {
        const $subtotal = table.querySelectorAll(".subtotal");
        const $valorTotal = document.getElementById('js-valor-total');
        $valorTotal.value = 0;
        for (let i = 0; i < $subtotal.length; i++) {
            AddToValorTotal(parseFloat($subtotal[i].textContent));
        }
    }

    //--------------------------------------------
    //Adicionar produto na tela

    var $addProd = document.getElementById("adicionarProduto");
    // var contador = table.querySelectorAll(".js-row").length;
    $addProd.addEventListener("click", function () {
        const newRow = table.rows[0].cloneNode(true);

        // Atualizar os índices dos campos
        const index = table.rows.length;
        newRow.querySelectorAll("input, select").forEach((input) => {
            const name = input.getAttribute("name");
            if (name) {
                input.setAttribute("name", name.replace(/\[0\]/, `[${index}]`));
            }

            input.value = ""; // Limpar valores dos novos campos
        });

        newRow.querySelector(".input-quantidade").value = 1;

        table.appendChild(newRow);
    });
</script>
